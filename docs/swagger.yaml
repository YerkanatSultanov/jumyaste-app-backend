definitions:
  gin.H:
    additionalProperties: {}
    type: object
  internal_handler.SendInvitationRequest:
    properties:
      dep_id:
        type: integer
      email:
        type: string
    type: object
  jumyste-app-backend_internal_dto.CreateDepartmentRequest:
    properties:
      color:
        type: string
      name:
        type: string
    required:
    - color
    - name
    type: object
  jumyste-app-backend_internal_dto.CreateVacancyRequest:
    properties:
      category:
        example: IT
        type: string
      description:
        example: <h3><strong><em><s>Hello</s></em></strong></h3>
        type: string
      employment_type:
        example: Полная занятость
        type: string
      experience:
        example: Без опыта
        type: string
      location:
        example: Almaty
        type: string
      salary_max:
        example: 909000
        type: integer
      salary_min:
        example: 253000
        type: integer
      skills:
        example:
        - '["Python"'
        - '"Node.js"]'
        items:
          type: string
        type: array
      title:
        example: Frontend developer
        type: string
      work_format:
        example: Гибрид
        type: string
    type: object
  jumyste-app-backend_internal_dto.DescriptionResponse:
    properties:
      description:
        type: string
    type: object
  jumyste-app-backend_internal_dto.ErrorResponse:
    properties:
      error:
        example: Invalid input
        type: string
    type: object
  jumyste-app-backend_internal_dto.FeedDataResponse:
    properties:
      new_vacancies_count:
        type: integer
    type: object
  jumyste-app-backend_internal_dto.JobAppStatusAnalytics:
    properties:
      count:
        example: 1
        type: integer
      percentage:
        example: 50
        type: integer
      status:
        example: new
        type: string
    type: object
  jumyste-app-backend_internal_dto.JobApplicationResponse:
    properties:
      applied_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      status:
        type: string
      user_id:
        type: integer
      vacancy_id:
        type: integer
    type: object
  jumyste-app-backend_internal_dto.JobApplicationWithResumeResponse:
    properties:
      ai_matching_score:
        type: integer
      ai_strengths:
        type: string
      ai_weaknesses:
        type: string
      applied_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      resume:
        $ref: '#/definitions/jumyste-app-backend_internal_dto.ResumeResponse'
      status:
        type: string
      user_id:
        type: integer
      vacancy_id:
        type: integer
    type: object
  jumyste-app-backend_internal_dto.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: securepassword
        type: string
    required:
    - email
    - password
    type: object
  jumyste-app-backend_internal_dto.LoginResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  jumyste-app-backend_internal_dto.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    type: object
  jumyste-app-backend_internal_dto.RegisterHRRequest:
    properties:
      company_id:
        example: 1
        type: integer
      dep_id:
        example: 1
        type: integer
      email:
        example: user@example.com
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      password:
        example: securepassword
        minLength: 6
        type: string
    required:
    - company_id
    - dep_id
    - email
    - first_name
    - last_name
    - password
    type: object
  jumyste-app-backend_internal_dto.RegisterUserRequest:
    properties:
      email:
        example: user@example.com
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      password:
        example: securepassword
        type: string
      profile_picture:
        example: /static/images/profile.jpg
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - profile_picture
    type: object
  jumyste-app-backend_internal_dto.RequestPasswordResetRequest:
    properties:
      email:
        example: user@example.com
        type: string
    required:
    - email
    type: object
  jumyste-app-backend_internal_dto.RequestPasswordResetResponse:
    properties:
      message:
        example: Reset code sent to your email
        type: string
    type: object
  jumyste-app-backend_internal_dto.ResetPasswordRequest:
    properties:
      confirm_password:
        example: newSecurePass
        minLength: 6
        type: string
      email:
        example: user@example.com
        type: string
      new_password:
        example: newSecurePass
        minLength: 6
        type: string
      reset_code:
        example: "123456"
        type: string
    required:
    - confirm_password
    - email
    - new_password
    - reset_code
    type: object
  jumyste-app-backend_internal_dto.ResetPasswordResponse:
    properties:
      message:
        example: Password reset successful
        type: string
    type: object
  jumyste-app-backend_internal_dto.ResumeRequest:
    properties:
      about:
        type: string
      city:
        type: string
      desired_position:
        type: string
      full_name:
        type: string
      skills:
        items:
          type: string
        type: array
    required:
    - desired_position
    - full_name
    - skills
    type: object
  jumyste-app-backend_internal_dto.ResumeResponse:
    properties:
      about:
        type: string
      city:
        type: string
      desired_position:
        type: string
      full_name:
        type: string
      parsed_data: {}
      skills:
        items:
          type: string
        type: array
      user:
        $ref: '#/definitions/jumyste-app-backend_internal_dto.UserResponse'
    type: object
  jumyste-app-backend_internal_dto.SuccessResponse:
    properties:
      message:
        example: User registered successfully
        type: string
    type: object
  jumyste-app-backend_internal_dto.UpdateVacancyRequest:
    properties:
      category:
        type: string
      description:
        type: string
      employment_type:
        type: string
      experience:
        type: string
      location:
        type: string
      salary_max:
        type: integer
      salary_min:
        type: integer
      skills:
        items:
          type: string
        type: array
      title:
        type: string
      work_format:
        type: string
    required:
    - category
    - description
    - employment_type
    - experience
    - location
    - salary_max
    - salary_min
    - skills
    - title
    - work_format
    type: object
  jumyste-app-backend_internal_dto.UpdateVacancyStatusRequest:
    properties:
      status:
        type: string
    type: object
  jumyste-app-backend_internal_dto.UserResponse:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      profile_picture:
        type: string
      role_id:
        type: integer
    type: object
  jumyste-app-backend_internal_dto.VacancyInput:
    properties:
      employment_type:
        type: string
      experience:
        type: string
      location:
        type: string
      salary_max:
        type: integer
      salary_min:
        type: integer
      skills:
        items:
          type: string
        type: array
      title:
        type: string
      work_format:
        type: string
    type: object
  jumyste-app-backend_internal_entity.Chat:
    properties:
      created_at:
        type: string
      id:
        type: integer
      is_read:
        type: boolean
      last_message:
        type: string
      last_message_at:
        type: string
      updated_at:
        type: string
      users:
        items:
          $ref: '#/definitions/jumyste-app-backend_internal_entity.UserResponse'
        type: array
    type: object
  jumyste-app-backend_internal_entity.Company:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      ownerId:
        type: integer
      photoUrl:
        type: string
    type: object
  jumyste-app-backend_internal_entity.Department:
    properties:
      color:
        type: string
      company_id:
        type: integer
      hr_count:
        type: integer
      id:
        type: integer
      name:
        type: string
    type: object
  jumyste-app-backend_internal_entity.JobApplicationWithResume:
    properties:
      ai_matching_score:
        type: integer
      ai_strengths:
        type: string
      ai_weaknesses:
        type: string
      applied_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      resume:
        $ref: '#/definitions/jumyste-app-backend_internal_entity.Resume'
      resume_id:
        type: integer
      status:
        type: string
      user:
        $ref: '#/definitions/jumyste-app-backend_internal_entity.User'
      user_id:
        type: integer
      vacancy_id:
        type: integer
    type: object
  jumyste-app-backend_internal_entity.Message:
    properties:
      chat_id:
        type: integer
      content:
        type: string
      created_at:
        type: string
      file_url:
        type: string
      id:
        type: integer
      is_mine:
        type: boolean
      read_by:
        items:
          type: integer
        type: array
      sender_id:
        type: integer
      type:
        $ref: '#/definitions/jumyste-app-backend_internal_entity.MessageType'
      updated_at:
        type: string
    type: object
  jumyste-app-backend_internal_entity.MessageType:
    enum:
    - text
    - image
    - video
    - audio
    - file
    type: string
    x-enum-varnames:
    - TextMessage
    - ImageMessage
    - VideoMessage
    - AudioMessage
    - FileMessage
  jumyste-app-backend_internal_entity.Resume:
    properties:
      about:
        type: string
      city:
        type: string
      created_at:
        type: string
      desired_position:
        type: string
      full_name:
        type: string
      id:
        type: integer
      parsed_data:
        additionalProperties: true
        type: object
      skills:
        items:
          type: string
        type: array
      user_id:
        type: integer
    type: object
  jumyste-app-backend_internal_entity.User:
    properties:
      company_id:
        type: integer
      department_id:
        type: integer
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      password:
        type: string
      profile_picture:
        type: string
      role_id:
        type: integer
    type: object
  jumyste-app-backend_internal_entity.UserResponse:
    properties:
      company:
        $ref: '#/definitions/jumyste-app-backend_internal_entity.Company'
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      profile_picture:
        type: string
    type: object
  jumyste-app-backend_internal_entity.Vacancy:
    properties:
      category:
        type: string
      company_id:
        type: integer
      count_responses:
        type: integer
      created_at:
        type: string
      created_by:
        type: integer
      description:
        type: string
      employment_type:
        type: string
      experience:
        type: string
      id:
        type: integer
      location:
        type: string
      salary_max:
        type: integer
      salary_min:
        type: integer
      skills:
        items:
          type: string
        type: array
      status:
        type: string
      title:
        type: string
      work_format:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Sends a password reset code to the user's email.
      parameters:
      - description: User email
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/jumyste-app-backend_internal_dto.RequestPasswordResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.RequestPasswordResetResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      summary: Request password reset
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns access and refresh tokens.
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/jumyste-app-backend_internal_dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      summary: User login
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Generates a new access token using the provided refresh token
      parameters:
      - description: Refresh Token Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/jumyste-app-backend_internal_dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      summary: Refresh JWT token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account.
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/jumyste-app-backend_internal_dto.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      summary: Register a new user
      tags:
      - Auth
  /auth/register-hr:
    post:
      consumes:
      - application/json
      description: Creates a new HR account (requires invitation).
      parameters:
      - description: HR registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/jumyste-app-backend_internal_dto.RegisterHRRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      summary: Register a new HR
      tags:
      - Auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Resets the password using a reset code.
      parameters:
      - description: Reset password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/jumyste-app-backend_internal_dto.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ResetPasswordResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      summary: Reset user password
      tags:
      - Auth
  /chats:
    get:
      consumes:
      - application/json
      description: Retrieve all chats
      produces:
      - application/json
      responses:
        "200":
          description: List of all chats
          schema:
            items:
              $ref: '#/definitions/jumyste-app-backend_internal_entity.Chat'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all chats
      tags:
      - Chats
    post:
      consumes:
      - application/json
      description: Create a new chat by providing the second user's ID
      parameters:
      - description: Second User ID
        in: body
        name: second_user_id
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Chat created successfully
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_entity.Chat'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Failed to create chat
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a chat between two users
      tags:
      - Chats
  /chats/{chatID}:
    get:
      consumes:
      - application/json
      description: Retrieve a chat by its ID
      parameters:
      - description: Chat ID
        in: path
        name: chatID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Chat found
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_entity.Chat'
        "400":
          description: Invalid chat ID
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "404":
          description: Chat not found
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get chat by ID
      tags:
      - Chats
  /chats/user:
    get:
      consumes:
      - application/json
      description: Retrieve all chats for a specific user by their user ID
      produces:
      - application/json
      responses:
        "200":
          description: List of chats for the user
          schema:
            items:
              $ref: '#/definitions/jumyste-app-backend_internal_entity.Chat'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get chats by user ID
      tags:
      - Chats
  /departments:
    post:
      consumes:
      - application/json
      description: Creates a new department within the authenticated user's company
      parameters:
      - description: Department data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/jumyste-app-backend_internal_dto.CreateDepartmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Created department
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_entity.Department'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Failed to create department
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new department
      tags:
      - Departments
  /departments/{id}:
    get:
      description: Get details of a specific department
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_entity.Department'
        "404":
          description: Department not found
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a department by ID
      tags:
      - Departments
  /departments/all:
    get:
      description: Retrieves a list of all departments for the authenticated user's
        company
      produces:
      - application/json
      responses:
        "200":
          description: List of departments
          schema:
            items:
              $ref: '#/definitions/jumyste-app-backend_internal_entity.Department'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Failed to fetch departments
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all Departments
      tags:
      - Departments
  /invitations:
    post:
      consumes:
      - application/json
      description: Send an invitation email to a user with company and department
        information
      parameters:
      - description: Invitation request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_handler.SendInvitationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.SuccessResponse'
        "400":
          description: Invalid request body or missing required fields
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Failed to send invitation
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Send invitation to register
      tags:
      - Invitations
  /jobs/{application_id}:
    delete:
      consumes:
      - application/json
      description: Delete a job application by application ID
      parameters:
      - description: Application ID
        in: path
        name: application_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.SuccessResponse'
        "400":
          description: Invalid application ID
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Failed to delete job application
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a job application
      tags:
      - Job Applications
  /jobs/{application_id}/status/{status}:
    put:
      consumes:
      - application/json
      description: Update the status of a specific job application by application
        ID
      parameters:
      - description: Application ID
        in: path
        name: application_id
        required: true
        type: integer
      - description: New Status
        in: path
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.SuccessResponse'
        "400":
          description: Invalid application ID or status
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Failed to update application status
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update the status of a job application
      tags:
      - Job Applications
  /jobs/{vacancy_id}:
    get:
      consumes:
      - application/json
      description: Retrieve all job applications for a specific vacancy
      parameters:
      - description: Vacancy ID
        in: path
        name: vacancy_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/jumyste-app-backend_internal_dto.JobApplicationWithResumeResponse'
            type: array
        "400":
          description: Invalid vacancy ID
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Failed to retrieve job applications
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get job applications by vacancy ID
      tags:
      - Job Applications
  /jobs/analytics:
    get:
      description: Retrieves analytical statistics for job applications assigned to
        the HR user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/jumyste-app-backend_internal_dto.JobAppStatusAnalytics'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Failed to get analytics
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get HR analytics for job applications
      tags:
      - Job Applications
  /jobs/application/{application_id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific job application with resume details
      parameters:
      - description: Application ID
        in: path
        name: application_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.JobApplicationWithResumeResponse'
        "400":
          description: Invalid application ID
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Failed to retrieve application
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a job application by ID
      tags:
      - Job Applications
  /jobs/apply/{vacancy_id}:
    post:
      consumes:
      - application/json
      description: Apply for a job by providing vacancy ID and user details
      parameters:
      - description: Vacancy ID
        in: path
        name: vacancy_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.JobApplicationResponse'
        "400":
          description: Invalid vacancy ID
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Failed to apply for job
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Apply for a job
      tags:
      - Job Applications
  /messages:
    post:
      consumes:
      - multipart/form-data
      description: Send a message to a specific chat
      parameters:
      - description: Chat ID
        in: formData
        name: chat_id
        required: true
        type: integer
      - description: Message Type (text, image, etc.)
        in: formData
        name: type
        required: true
        type: string
      - description: Message Content
        in: formData
        name: content
        required: true
        type: string
      - description: File URL (optional)
        in: formData
        name: file_data
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Message successfully sent
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Send a message
      tags:
      - Messages
  /messages/{messageID}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific message by its ID
      parameters:
      - description: Message ID
        in: path
        name: messageID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Message details
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_entity.Message'
        "400":
          description: Invalid message ID
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "404":
          description: Message not found
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get message by message ID
      tags:
      - Messages
  /messages/chat/{chatID}:
    get:
      consumes:
      - application/json
      description: Retrieve all messages for a specific chat
      parameters:
      - description: Chat ID
        in: path
        name: chatID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of messages
          schema:
            items:
              $ref: '#/definitions/jumyste-app-backend_internal_entity.Message'
            type: array
        "400":
          description: Invalid chat ID
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get messages by chat ID
      tags:
      - Messages
  /messages/read:
    post:
      consumes:
      - application/json
      description: Mark a specific message as read
      parameters:
      - description: Message ID
        in: query
        name: message_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Status of the operation
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Invalid message ID
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Mark message as read
      tags:
      - Messages
  /resume/:
    delete:
      consumes:
      - application/json
      description: Delete the resume associated with a given user ID
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted resume
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.SuccessResponse'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Failed to delete resume
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a resume by user ID
      tags:
      - Resume
  /resume/{user_id}:
    get:
      consumes:
      - application/json
      description: Retrieve the resume of a user by their user ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ResumeResponse'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "404":
          description: Resume or user not found
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Failed to get resume
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a resume by user ID
      tags:
      - Resume
  /resume/candidates:
    get:
      consumes:
      - application/json
      description: Filter candidates using multiple query parameters such as AI match
        score, skills, city, and position.
      parameters:
      - description: Minimum AI match score
        in: query
        name: ai_match
        type: integer
      - description: Skills (can be passed multiple times)
        in: query
        name: skills
        type: string
      - description: City of the candidate
        in: query
        name: city
        type: string
      - description: Desired position of the candidate
        in: query
        name: position
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of filtered candidates
          schema:
            items:
              $ref: '#/definitions/jumyste-app-backend_internal_entity.JobApplicationWithResume'
            type: array
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Failed to filter candidates
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Filter candidates based on specified criteria
      tags:
      - Resume
  /resume/manual:
    post:
      consumes:
      - application/json
      description: Create and save a resume using the provided JSON data
      parameters:
      - description: Resume data
        in: body
        name: resume_request
        required: true
        schema:
          $ref: '#/definitions/jumyste-app-backend_internal_dto.ResumeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Resume saved successfully
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.SuccessResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Failed to save resume
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a resume from JSON data
      tags:
      - Resume
  /resume/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload a resume file and process it
      parameters:
      - description: Resume file
        in: formData
        name: resume
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ResumeResponse'
        "400":
          description: Failed to retrieve resume file
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Failed to process resume
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload a resume
      tags:
      - Resume
  /users/me:
    get:
      consumes:
      - application/json
      description: Retrieves the profile information of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: User profile information
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_entity.UserResponse'
        "401":
          description: Unauthorized - Token is missing or invalid
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "404":
          description: User not found - No user associated with the given ID
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Internal server error - Invalid user ID type
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user information
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Update user details such as name, email, or profile picture
      parameters:
      - description: Fields to update
        in: body
        name: updates
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.SuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Failed to update user
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user information
      tags:
      - Users
  /users/vacancy:
    get:
      description: Retrieves a list of all vacancies
      produces:
      - application/json
      responses:
        "200":
          description: List of vacancies
          schema:
            items:
              $ref: '#/definitions/jumyste-app-backend_internal_entity.Vacancy'
            type: array
        "500":
          description: Failed to fetch vacancies
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all vacancies
      tags:
      - All can use
  /users/vacancy/{id}:
    get:
      description: Retrieve a specific vacancy by its ID
      parameters:
      - description: Vacancy ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_entity.Vacancy'
        "400":
          description: Invalid vacancy ID
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "404":
          description: Vacancy not found
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get vacancy by ID
      tags:
      - All can use
  /users/vacancy/search:
    get:
      consumes:
      - application/json
      description: Allows searching for vacancies based on various filters, including
        an optional status filter.
      parameters:
      - description: Search query
        in: query
        name: query
        type: string
      - collectionFormat: multi
        description: Employment type filter
        in: query
        items:
          type: string
        name: employment_type
        type: array
      - collectionFormat: multi
        description: Work format filter
        in: query
        items:
          type: string
        name: work_format
        type: array
      - collectionFormat: multi
        description: Skills filter
        in: query
        items:
          type: string
        name: skills
        type: array
      - default: all
        description: Filter vacancies by status (open, closed, or 'all' for all vacancies)
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of matching vacancies
          schema:
            items:
              $ref: '#/definitions/jumyste-app-backend_internal_entity.Vacancy'
            type: array
        "400":
          description: Invalid search parameters
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Failed to search vacancies
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Search for vacancies
      tags:
      - All can use
  /vacancies:
    post:
      consumes:
      - application/json
      description: Allows an employer to create a new vacancy
      parameters:
      - description: Vacancy details
        in: body
        name: vacancy
        required: true
        schema:
          $ref: '#/definitions/jumyste-app-backend_internal_dto.CreateVacancyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Vacancy successfully created
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_entity.Vacancy'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Failed to create vacancy
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new vacancy
      tags:
      - Vacancies
  /vacancies/{id}:
    delete:
      consumes:
      - application/json
      description: Allows an employer to delete their own vacancy
      parameters:
      - description: Vacancy ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Vacancy deleted successfully
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.SuccessResponse'
        "400":
          description: Invalid vacancy ID
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "403":
          description: User does not own the vacancy
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "404":
          description: Vacancy not found
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Failed to delete vacancy
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a vacancy
      tags:
      - Vacancies
    put:
      consumes:
      - application/json
      description: Allows an employer to update their own vacancy
      parameters:
      - description: Vacancy ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated vacancy details
        in: body
        name: vacancy
        required: true
        schema:
          $ref: '#/definitions/jumyste-app-backend_internal_dto.UpdateVacancyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Vacancy updated successfully
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.SuccessResponse'
        "400":
          description: Invalid input or vacancy ID
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "403":
          description: User does not own the vacancy
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "404":
          description: Vacancy not found
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Failed to update vacancy
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an existing vacancy
      tags:
      - Vacancies
  /vacancies/company:
    get:
      description: Retrieve all vacancies for the company of the current HR
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/jumyste-app-backend_internal_entity.Vacancy'
            type: array
        "500":
          description: Failed to retrieve vacancies
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get vacancies by company ID
      tags:
      - Vacancies
  /vacancies/feed/data:
    get:
      description: Returns count of new vacancies since last feed view
      responses:
        "200":
          description: Feed data
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.FeedDataResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get feed data for user
      tags:
      - Vacancies
  /vacancies/generate-description:
    post:
      consumes:
      - application/json
      description: Generate a detailed HTML description for the given vacancy details.
      parameters:
      - description: Vacancy Input
        in: body
        name: vacancyInput
        required: true
        schema:
          $ref: '#/definitions/jumyste-app-backend_internal_dto.VacancyInput'
      produces:
      - application/json
      responses:
        "200":
          description: Description generated successfully
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.DescriptionResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Failed to generate description
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Generate vacancy description
      tags:
      - Vacancies
  /vacancies/hr/{id}:
    get:
      description: Retrieve a specific vacancy by its ID
      parameters:
      - description: Vacancy ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_entity.Vacancy'
        "400":
          description: Invalid vacancy ID
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "404":
          description: Vacancy not found
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get vacancy by ID
      tags:
      - Vacancies
  /vacancies/my:
    get:
      consumes:
      - application/json
      description: Returns a list of vacancies created by the currently authenticated
        HR user
      produces:
      - application/json
      responses:
        "200":
          description: List of vacancies
          schema:
            items:
              $ref: '#/definitions/jumyste-app-backend_internal_entity.Vacancy'
            type: array
        "500":
          description: Failed to retrieve vacancies
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get vacancies created by the authenticated HR
      tags:
      - Vacancies
  /vacancies/status/{id}:
    put:
      consumes:
      - application/json
      description: Update the status of a vacancy by its ID
      parameters:
      - description: Vacancy ID
        in: path
        name: id
        required: true
        type: integer
      - description: New status
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/jumyste-app-backend_internal_dto.UpdateVacancyStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update vacancy status
      tags:
      - Vacancies
  /ws:
    get:
      description: Устанавливает WebSocket-соединение с авторизованным пользователем
        и chat_id в query
      parameters:
      - description: ID чата
        in: query
        name: chat_id
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        "101":
          description: Switching Protocols – WebSocket connection established
          schema:
            type: string
        "400":
          description: Invalid chat ID
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "401":
          description: Unauthorized – отсутствует или неверный токен
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
        "500":
          description: Ошибка при апгрейде соединения
          schema:
            $ref: '#/definitions/jumyste-app-backend_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: WebSocket соединение с чатом
      tags:
      - WebSocket
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and your JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
